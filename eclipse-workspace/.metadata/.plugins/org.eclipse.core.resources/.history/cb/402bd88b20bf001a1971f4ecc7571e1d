package com.proyectocsi.api.rest.controllers;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.proyectocsi.api.rest.models.entity.Grupo;
import com.proyectocsi.api.rest.models.services.IGrupoService;

@CrossOrigin(origins = {"http://localhost:4200"})
@RestController
@RequestMapping("/api")
public class GrupoController {
	
	@Autowired
	private IGrupoService grupoService;
	
	@GetMapping("/grupos")
	public List<Grupo> index(){
		return this.grupoService.findAll();
	}
	
	@GetMapping("/grupos/{id}")
	public ResponseEntity<?> show(@PathVariable Long id) {
		Grupo consultaGrupo = null;
		Map<String, Object> response = new HashMap<String, Object>();
		
		try {
			consultaGrupo = this.grupoService.findById(id);
			if(consultaGrupo==null) {
				response.put("mensaje", "Grupo con el id proporcionado no existe.");
				return new ResponseEntity<Map<String,Object>>(response, HttpStatus.NOT_FOUND);
			}
		}catch(DataAccessException ex) {
			response.put("mensaje", "Error al realizar la consulta de grupo");
			response.put("error", ex.getMessage().concat(": ").concat(ex.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return new ResponseEntity<Grupo>(consultaGrupo,HttpStatus.OK);
	}
	
	@PostMapping("/registra-grupo")
	public ResponseEntity<?> create(@RequestBody Grupo grupo) {
		Grupo nuevoGrupo = null;
		Map<String, Object> response = new HashMap<String, Object>();
		
		try {
			nuevoGrupo = this.grupoService.save(grupo);
		}
		catch(DataAccessException ex) {
			response.put("mensaje", "error al intentar registrar nuevo grupo");
			response.put("error", ex.getMessage().concat(": ").concat(ex.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String,Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		response.put("mensaje", "Grupo registrado correctamente");
		response.put("grupo", nuevoGrupo);
		
		return new ResponseEntity<Map<String,Object>>(response,HttpStatus.CREATED);
		
	}
	
	@PutMapping("/modifica-grupo/{id}")
	public ResponseEntity<?> update(@RequestBody Grupo grupo, @PathVariable Long id) {
		Grupo grupoActual = this.grupoService.findById(id);
		Grupo actualizacionGrupo = null;
		Map<String, Object> response = new HashMap<String, Object>();
		try {
			
			if(grupoActual == null) {
				response.put("mensaje", "Error al actualizar informaci√≥n de grupo. Grupo no existe");
				return new ResponseEntity<Map<String,Object>>(response,HttpStatus.INTERNAL_SERVER_ERROR);
			}
			
			grupoActual.setCantidadAlumnos(grupo.getCantidadAlumnos());
			grupoActual.setMateria(grupo.getMateria());
			actualizacionGrupo = this.grupoService.save(grupoActual);
		}
		catch(DataAccessException ex) {
			response.put("mensaje", "Error al intentar actualizar el grupo");
			response.put("error", ex.getMessage().concat(": ").concat(ex.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String,Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		response.put("mensaje", "Actualizacion de grupo correcto");
		response.put("grupo", actualizacionGrupo);
		return new ResponseEntity<Map<String,Object>>(response,HttpStatus.OK);
	}
	
	@DeleteMapping("/elimina-grupo/{id}")
	@ResponseStatus(code=HttpStatus.OK)
	public void delete(@PathVariable Long id) {
		this.grupoService.delete(id);
	}
	
	
}
