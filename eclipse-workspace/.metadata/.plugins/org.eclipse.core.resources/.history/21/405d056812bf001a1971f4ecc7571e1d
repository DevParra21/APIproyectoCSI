package com.proyectocsi.api.rest.controllers;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.proyectocsi.api.rest.models.entity.Profesor;
import com.proyectocsi.api.rest.models.services.IProfesorService;

@CrossOrigin(origins = {"http://localhost:4200"})
@RestController
@RequestMapping("/api")
public class ProfesorController {
	
	@Autowired
	private IProfesorService profesorService;
	
	@GetMapping("/maestros")
	public List<Profesor> index(){
		return profesorService.findAll();
	}
	
	@GetMapping("/maestros/{id}")
	public ResponseEntity<?> show(@PathVariable Long id) {
		
		Profesor consultaProfesor = this.profesorService.findById(id);
		Map<String, Object> response = new HashMap<String, Object>();
		try {
			
			if(consultaProfesor==null) {
				response.put("mensaje", "No existe Maestro con ese numero de empleado.");
				return new ResponseEntity<Map<String,Object>>(response, HttpStatus.NOT_FOUND);
			}
		}
		catch(DataAccessException ex) {
			response.put("mensaje", "Ocurrió un problema al realizar la consulta");
			response.put("error", ex.getMessage().concat(": ").concat(ex.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String,Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		
		return new ResponseEntity<Profesor>(consultaProfesor, HttpStatus.OK);
	}
	
	@PostMapping("/registra-maestro")
	public ResponseEntity<?> create(@RequestBody Profesor profesor) {
		Profesor profesorNuevo = null;
		Map<String, Object> response = new HashMap<String, Object>();
		
		try {
			profesorNuevo = this.profesorService.save(profesor);
			response.put("mensaje","El maestro ha sido registrado con éxito");
			response.put("profesor", profesorNuevo);
		}
		catch(DataAccessException ex) {
			response.put("mensaje", "No se pudo establecer la conexión con la DB");
			response.put("error", ex.getMessage());
			return new ResponseEntity<Map<String,Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return new ResponseEntity<Map<String,Object>>(response,HttpStatus.CREATED);
	}
	
	@PutMapping("/modifica-maestro/{id}")
	@ResponseStatus(code = HttpStatus.CREATED)
	public Profesor update(@RequestBody Profesor profesor, @PathVariable Long id) {
		Profesor profesorActual = this.profesorService.findById(id);
		
		profesorActual.setNumeroEmpleado(profesor.getNumeroEmpleado());
		profesorActual.getTipoProfesor().setId(profesor.getTipoProfesor().getId());
		profesorActual.getUsuario().setApellidoMaterno(profesor.getUsuario().getApellidoMaterno());
		profesorActual.getUsuario().setApellidoPaterno(profesor.getUsuario().getApellidoPaterno());
		profesorActual.getUsuario().setContrasenia(profesor.getUsuario().getContrasenia());
		profesorActual.getUsuario().setNombre(profesor.getUsuario().getNombre());
		profesorActual.getUsuario().setNombreUsuario(profesor.getUsuario().getNombreUsuario());
		
		return this.profesorService.save(profesorActual);
		
	}
	
	
	@DeleteMapping("/elimina-maestro/{id}")
	@ResponseStatus(code = HttpStatus.OK)
	public void delete(@PathVariable Long id) {
		this.profesorService.delete(id);
	}
}
