package com.proyectocsi.api.rest.controllers;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.proyectocsi.api.rest.models.entity.Alumno;
import com.proyectocsi.api.rest.models.entity.Grupo;
import com.proyectocsi.api.rest.models.services.IAlumnoService;
@CrossOrigin(origins = {"http://localhost:4200"})
@RestController
@RequestMapping("/api")
public class AlumnoController {
	
	@Autowired
	private IAlumnoService alumnoService;
	
	@GetMapping("/alumnos")
	public List<Alumno> index(){
		return alumnoService.findAll();
	}
	
	@GetMapping("/alumnos/{id}")
	public ResponseEntity<?> show(@PathVariable Long id) {
		Alumno consultaAlumno = null;
		Map<String, Object> response = new HashMap<String, Object>();
		try {
			consultaAlumno =  this.alumnoService.findById(id);
			if(consultaAlumno==null) {
				response.put("mensaje", "alumno no existe.");
				return new ResponseEntity<Map<String, Object>>(response, HttpStatus.NOT_FOUND);
			}
		}catch(DataAccessException ex) {
			response.put("mensaje", "No se pudo establecer la conexión con la base de datos");
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<Alumno>(consultaAlumno, HttpStatus.OK);
	}
	
	@GetMapping("/alumnos/inscripciones/disponibles/{id}")
	public ResponseEntity<?> gruposDisponibles(@PathVariable Long id){
		List<Grupo> grupos = new ArrayList<Grupo>();
		Map<String,Object> response = new HashMap<String, Object>();
		try {
			grupos = this.alumnoService.findByGrupoDisponible(id);
			return new ResponseEntity<List<Grupo>>(grupos,HttpStatus.OK);
		}
		catch(DataAccessException ex) {
			
		}
		
	}
	
	@PostMapping("/registra-alumno")
	public ResponseEntity<?> create(@Valid @RequestBody Alumno alumno, BindingResult result) {
		Alumno nuevoAlumno = null;
		Map<String, Object> response = new HashMap<String, Object>();
		
		if(result.hasErrors()) {
			List<String> errores = new ArrayList<String>();
			for(FieldError error: result.getFieldErrors()) {
				errores.add("El campo " + error.getField() + " " + error.getDefaultMessage());
			}
			response.put("errores", errores);
			return new ResponseEntity<Map<String,Object>>(response, HttpStatus.BAD_REQUEST);
		}
		
		try {
			nuevoAlumno = this.alumnoService.save(alumno);
		}
		catch(DataAccessException ex) {
			response.put("mensaje", "Error al registrar los datos del alumno");
			response.put("error",ex.getMessage().concat(": ").concat(ex.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String,Object>>(response,HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		response.put("mensaje", "Los datos del alumno se han registrado correctamente");
		response.put("alumno", nuevoAlumno);
		
		return new ResponseEntity<Map<String,Object>>(response, HttpStatus.CREATED);
	}
	
	@PutMapping("modifica-alumno/{id}")
	public ResponseEntity<?> update(@RequestBody Alumno alumno, @PathVariable Long id) {
		Alumno actualizacionAlumno = null;
		Map<String, Object> response = new HashMap<String, Object>();
		
		Alumno alumnoActual = this.alumnoService.findById(id);
		if(alumnoActual==null) {
			response.put("mensaje", "No se pudo actualizar la información");
			return new ResponseEntity<Map<String,Object>>(response,HttpStatus.NOT_FOUND);
		}
		
		try {
			alumnoActual.getUsuario().setEstatus(alumno.getUsuario().getEstatus());
			alumnoActual.getUsuario().setApellidoMaterno(alumno.getUsuario().getApellidoMaterno());
			alumnoActual.getUsuario().setApellidoPaterno(alumno.getUsuario().getApellidoPaterno());
			alumnoActual.getUsuario().setContrasenia(alumno.getUsuario().getContrasenia());
			alumnoActual.getUsuario().setNombre(alumno.getUsuario().getNombre());
			alumnoActual.getUsuario().setNombreUsuario(alumno.getUsuario().getNombreUsuario());
			
			actualizacionAlumno = this.alumnoService.save(alumnoActual);
		}
		catch(DataAccessException ex) {
			response.put("mensaje", "Error al intentar actualizar los datos del alumno");
			response.put("error", ex.getMessage().concat(": ").concat(ex.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String,Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		response.put("mensaje", "Actualización realizada con éxito");
		response.put("alumno",actualizacionAlumno);
		return new ResponseEntity<Map<String,Object>>(response,HttpStatus.OK);
	}
	
	@DeleteMapping("elimina-alumno/{id}")
	@ResponseStatus(code=HttpStatus.OK)
	public void delete(@PathVariable Long id) {
		this.alumnoService.delete(id);
	}
}
